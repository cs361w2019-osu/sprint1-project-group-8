package cs361.battleships.models;

import org.junit.Test;

import static junit.framework.TestCase.assertTrue;

public class UserStory4 {

    @Test
    public void testRandCol() {
        double r = Math.floor(Math.random() * 10);
        var str = "ACBDEFGHIJ";
        char c = str.charAt((int) r);
        assertTrue(c == 65 || c == 66 || c == 67 || c == 68 || c == 69 || c == 70 || c == 71 || c == 72 || c == 73 || c == 74);
    }

    @Test
    public void testRandRow() {
        double r = Math.floor(Math.random() * 10);
        assertTrue(r >= 0 && r <= 9);
    }

    @Test
    public void testRandVertical() {
        boolean test;
        double r = Math.floor(Math.random() * 1);
        assertTrue(r >= 0 && r <= 1);
        if(r == 1) {
            test = true;
        }
        else
            test = false;
        assertTrue(test == true || test == false);
    }
}
//Since the functions for attacking and placing ships validly have already passed in User Story 1, all we need
// to prove is that the randomization functions return values within the set parameters.
//testRandCol should return A, B, C, D, E, F, G, H, I or J and as such, each possible value of C is tested against the
// appropriate Ascii values.
//testRandRow should return a number between 0 and 9 and as such is ensured to be between those two numbers.
//testRandVertical simply needs to return a true or false statement but since this value is determined by RNG, the RNG
// is tested to ensure it returns values between 0 and 1.
// Since all cases pass, we know all randomization is working just fine and as such, any input generated by these for
// the functions for placing ships or attacking will also work.